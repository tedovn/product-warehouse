type Calculation {
  result: Float!
}

type Customer {
  id: Int
  customer_number: String!
  name: String!
  city: String
  state: String
  created_at: String
}

enum ProductType {
  hazardous
  nonhazardous
}

type Product {
  id: Int
  name: String!
  description: String
  type: ProductType!
  created_at: String
}

input createProductInput {
  name: String!
  description: String
  type: ProductType
}

input createWarehouseInput {
  name: String!
  capacity: Int!
}

type SumProductWarehouseHistory {
  product_name: String!
  sum: Int
}

type Warehouse {
  id: Int
  name: String!
  capacity: Int!
  products: [SumProductWarehouseHistory]
  created_at: String
}

input createWarehouseHistoryInput {
  warehouse_id: Int!
  product_id: Int!
  customer_id: Int!
  quantity: Int!
}

enum WarehouseHistoryType {
  import
  export
}

type WarehouseHistory {
  id: Int
  warehouse_id: Int!
  product_id: Int!
  product_name: String!
  product_description: String!
  product_quantity: Int!
  customer_id: Int!
  type: WarehouseHistoryType!
  created_at: String
}

type Query {
  customers: [Customer]
  products: [Product]
  warehouses: [Warehouse]
  customer(id: Int!): Customer
  product(id: Int!): Product
  warehouse(id: Int!): Warehouse
  warehouseHistory(id: Int!): [WarehouseHistory]
}

type Mutation {
  sum(num1: Int!, num2: Int!): Calculation
  subtract(num1: Int!, num2: Int!): Calculation
  multiply(num1: Int!, num2: Int!): Calculation
  divide(num1: Int!, num2: Int!): Calculation
  createProduct(product: createProductInput!): Product
  deleteProduct(id: Int!): String
  createWarehouse(warehouse: createWarehouseInput!): Warehouse
  updateWarehouse(warehouse: createWarehouseInput!): Warehouse
  deleteWarehouse(id: Int!): String
  import(warehouseHistory: createWarehouseHistoryInput!): Int
  export(id: Int!, quantity: Int!): Int
}
