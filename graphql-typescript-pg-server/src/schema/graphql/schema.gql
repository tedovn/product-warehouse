enum Species {
  BIRDS
  FISH
  MAMMALS
  REPTILES
}

type User {
  id: Int!
  full_name: String
  country_code: String
  created_at: String
  pets: [Pet]
}

type Pet {
  id: Int!
  name: String
  owner_id: Int!
  specie: Species
  created_at: String
  owner: User
}

type Calculation {
  result: Float!
}

input createUserInput {
  full_name: String!
  country_code: String!
}

input createPetInput {
  name: String!
  owner_id: Int!
  specie: Species!
}

input updateUserInput {
  id: Int!
  full_name: String
  country_code: String
}

input updatePetInput {
  id: Int!
  name: String!
}

input sumNumbers {
  num1: Int!
  num2: Int!
}

type Query {
  pets: [Pet]
  users: [User]
  user(id: Int!): User
  pet(id: Int!): Pet
}

type Mutation {
  createPet(pet: createPetInput!): Pet
  createUser(user: createUserInput!): User
  deletePet(id: Int!): String
  deleteUser(id: Int!): String
  updatePet(pet: updatePetInput!): Pet
  updateUser(user: updateUserInput!): User
  sum(num1: Int!, num2: Int!): Calculation
  subtract(num1: Int!, num2: Int!): Calculation
  multiply(num1: Int!, num2: Int!): Calculation
  divide(num1: Int!, num2: Int!): Calculation
}
